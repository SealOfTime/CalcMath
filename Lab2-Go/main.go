package main

import (
	"bufio"
	"flag"
	"fmt"
	"log"
	m "math"
	"os"
	"regexp"
	"strings"
)

type app struct {
	eq *equation
	a, b, e float64
}

//–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ f(a) * f``(a) = +
var nac int
func main() {
	flag.IntVar(&nac,"p", 5, "number of signs after comma for floats in output")
	flag.Parse()

	var r *bufio.Reader
	var interactive bool

	inputFileName := flag.Arg(0)
	if len(inputFileName) != 0{
		f, err := os.Open(inputFileName)
		if err != nil {
			log.Fatalf("–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º '%s' –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.", inputFileName)
		}
		r = bufio.NewReader(f)
		interactive = false
	} else {
		r = bufio.NewReader(os.Stdin)
		interactive = true
	}

	app := app{}
	if interactive{
		app.eq = promptEquation(r)
		app.e = promptPrecision(r)
		app.a, app.b = promptInterval(r, &app)
	} else {
		app.eq = readEquationFromFile(r)
		app.e = readPrecisionFromFile(r)
		app.a, app.b = readIntervalFromFile(r, &app)
	}

	if m.Abs(app.eq.exec(app.b)) <= app.e {
		fmt.Printf("–†–µ—à–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ. –ö–æ—Ä–µ–Ω—å –≤–∞—à–µ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: %f\n", app.b)
		fmt.Println("–ï—Å–ª–∏ –≤—ã –Ω–µ —ç—Ç–æ–≥–æ –æ–∂–∏–¥–∞–ª–∏, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
	}

	if m.Abs(app.eq.exec(app.a)) <= app.e {
		fmt.Printf("–†–µ—à–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ. –ö–æ—Ä–µ–Ω—å –≤–∞—à–µ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: %f\n", app.a)
		fmt.Println("–ï—Å–ª–∏ –≤—ã –Ω–µ —ç—Ç–æ–≥–æ –æ–∂–∏–¥–∞–ª–∏, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
	}
	var me int
	if interactive {
		me = promptMethod(r)
	} else {
		me = readMethodFromFile(r)
	}
	switch me {
	case 1:{
		s := BisectionMethod{a:  app.a, b:  app.b, e:  app.e, eq: app.eq}
		steps := s.Solve()

		fmt.Println("–ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –º–µ—Ç–æ–¥–æ–º –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è: ")
		header := fmt.Sprintf(
			"%6s | %10s | %10s | %10s | %10s | %10s | %10s | %10s |\n",
		"‚Ññ —à–∞–≥–∞", "a", "b", "x", "fa", "fb", "fx", "|a-b|",
		)
		separator := strings.Repeat("-", len(header))
		fmt.Println(header, separator)

		format := fmt.Sprintf("%%6d | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df |\n", nac, nac, nac, nac, nac, nac, nac)
		for i, s := range steps {
			fmt.Printf(
				format,
				i, s.a, s.b, s.x, s.fa, s.fb, s.fx, s.interval,
			)
		}

		fmt.Printf(fmt.Sprintf("–û—Ç–≤–µ—Ç: x ‚âà %%10.%df\n", nac), steps[len(steps)-1].x)
	}
	case 2:{
		var x0, x1 float64
		if app.eq.exec(app.a) * app.eq.dd(app.a) > 0 {
			x0, x1 = app.a, app.a + 2 * app.e
			fmt.Printf("f(a) * f''(x) > 0:\nx0 = a = %10.5f; x1 = %10.5f\n", x0, x1)
		} else {
			x0, x1 = app.b, app.b - 2 * app.e
			fmt.Printf("x0 = b = %10.5f; x1 = %10.5f\n", x0, x1)
		}

		if m.Abs(app.eq.exec(x0)) <= app.e {
			fmt.Printf("–†–µ—à–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ. –ö–æ—Ä–µ–Ω—å –≤–∞—à–µ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: %f\n", x0)
			fmt.Println("–ï—Å–ª–∏ –≤—ã –Ω–µ —ç—Ç–æ–≥–æ –æ–∂–∏–¥–∞–ª–∏, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
			return
		}

		if m.Abs(app.eq.exec(x1)) <= app.e {
			fmt.Printf("–†–µ—à–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ. –ö–æ—Ä–µ–Ω—å –≤–∞—à–µ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è: %f\n", x1)
			fmt.Println("–ï—Å–ª–∏ –≤—ã –Ω–µ —ç—Ç–æ–≥–æ –æ–∂–∏–¥–∞–ª–∏, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
			return
		}

		fmt.Println("–ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –º–µ—Ç–æ–¥–æ–º —Å–µ–∫—É—â–∏—Ö: ")
		s := SecantMethod{x0: x0, x1: x1, e:  app.e, eq: app.eq}
		steps := s.Solve()

		header := fmt.Sprintf(
			"%6s | %10s | %10s | %10s | %10s | %10s | %10s | %10s |\n",
			"‚Ññ —à–∞–≥–∞", "x_(k-1)", "f(x_(k-1))", "x_k", "f(x_k)", "x_(k+1)", "f(x_(k+1))", "|x_k - x_(k+1)|",
		)
		separator := strings.Repeat("-", len(header))
		fmt.Println(header, separator)

		format := fmt.Sprintf("%%6d | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df |\n", nac, nac, nac, nac, nac, nac, nac)
		for i, s := range steps {
			fmt.Printf(format, i, s.prevX, s.fPrevX, s.x, s.fx, s.newX, s.fNewX, s.increment)
		}

		fmt.Printf(fmt.Sprintf("–û—Ç–≤–µ—Ç: x ‚âà %%10.%df\n", nac), steps[len(steps)-1].newX)
	}
	case 3:{
		var x0 float64
		if app.eq.exec(app.a) * app.eq.dd(app.a) > 0 {
			x0 = app.a
			fmt.Printf("x0 = a = %10.5f\n", x0)
		} else {
			x0 = app.b
			fmt.Printf("x0 = %10.5f\n", x0)
		}

		s := IterationMethod{
			a: app.a,
			b: app.b,
			x0: x0,
			e:  app.e,
			eq: app.eq,
		}
		steps, err := s.Solve()
		fmt.Println("–ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: ")

		fmt.Printf("ùúë(x) = x + %10.5f * (%s)\n", s.lambda, s.eq.notation)
		fmt.Printf("ùúë'(a) = ùúë'(%10.5f) = %10.5f; ùúë'(b) = ùúë'(%10.5f) = %10.5f\n",
			app.a, 1 + s.lambda * app.eq.d(app.a),
			app.b, 1 + s.lambda * app.eq.d(app.b),
		)
		if err != nil {
			fmt.Println("–ù–∞ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è.")
			return
		}

		header := fmt.Sprintf(
			"%6s | %10s | %10s | %10s | %10s | %10s |\n",
			"‚Ññ —à–∞–≥–∞", "x_k", "f(x_k)", "x_(k+1)", "ùúë(x_k)", "|x_k - x_(k+1)|",
		)
		separator := strings.Repeat("-", len(header))
		fmt.Println(header, separator)

		format := fmt.Sprintf("%%6d | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df | %% 10.%df |\n", nac, nac, nac, nac, nac)
		for i, s := range steps {
			fmt.Printf(format, i, s.x, s.fx, s.newX, s.phiX, s.increment)
		}

		fmt.Printf(fmt.Sprintf("–û—Ç–≤–µ—Ç: x ‚âà %%10.%df\n", nac), steps[len(steps)-1].newX)
	}
	}
}

var methods = []string {
	"–ü–æ–ª–æ–≤–∏–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è",
	"–°–µ–∫—É—â–∏—Ö",
	"–ü—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏",
}

var equations = []equation {
	{
		notation: "x^3 - x + 4",
		exec: func(x float64) float64 { return m.Pow(x, 3) - x + 4 },
		d: func(x float64) float64 { return 3*m.Pow(x, 2) - 1 },
		dd: func(x float64) float64 { return 6*x},
	},
	{
		notation: "sin(x)",
		exec: func(x float64) float64 { return m.Sin(x) },
		d: func(x float64) float64 { return m.Cos(x) },
		dd: func(x float64) float64 { return -m.Sin(x) },
	},
	{
		notation: "cos^2(x-2)",
		exec: func(x float64) float64 { return m.Pow(m.Cos(x-2), 2) },
		d: func(x float64) float64 { return m.Sin(4-2*x)},
		dd: func(x float64) float64 { return -2*m.Cos(4-2*x)},
	},
	{
		notation: "-2.7*x^3 - 1.48*x^2 + 19.23*x + 6.35",
		exec: func(x float64) float64 { return -2.7*m.Pow(x,3) - 1.48*m.Pow(x,2) + 19.23*x + 6.35},
		d: func(x float64) float64 {return -8.1*m.Pow(x, 2) - 2.96*x + 19.23},
		dd: func(x float64) float64 {return -16.2*x - 2.96},
	},
}

type equation struct {
	notation string
	exec func(x float64) (y float64)
	d func(x float64) float64
	dd func(x float64) float64
}

func promptMethod(r *bufio.Reader) int {
	fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è...")
	for i, me := range methods {
		fmt.Printf("%d) %s\n", i+1, me)
	}

	for {
		fmt.Print("> ")
		method, err := readMethod(r)
		switch err {
		case ErrUnknown, ErrNotAnInt:
			fmt.Println("–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ë—ã—Ç—å –º–æ–∂–µ—Ç, —ç—Ç–æ –±—ã–ª–æ –Ω–µ —á–∏—Å–ª–æ. –ë—ã—Ç—å –º–æ–∂–µ—Ç, –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª. –ò—Ç–æ–≥ –æ–¥–∏–Ω - –ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.")
		case ErrNotInList:
			fmt.Println("–¢–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		case nil:
			return method
		}
	}
}

var powOfTenRegexp = regexp.MustCompile("0\\.0*1$")
func promptPrecision(r *bufio.Reader) float64 {
	fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: ")

	for {
		fmt.Print("> ")
		precision, err := readPrecision(r)
		switch err {
		case ErrUnknown, ErrNotANumber:
			fmt.Println("–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ë—ã—Ç—å –º–æ–∂–µ—Ç, —ç—Ç–æ –±—ã–ª–æ –Ω–µ —á–∏—Å–ª–æ. –ë—ã—Ç—å –º–æ–∂–µ—Ç, –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª. –ò—Ç–æ–≥ –æ–¥–∏–Ω - –ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.")
		case ErrNotNormal:
			fmt.Println("–¢–æ—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—É (0, 1)")
		case ErrNotPowOfTen:
			fmt.Println("–¢–æ—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –≤—ã—Ä–∞–∂–∞—Ç—å—Å—è –¥–µ—Å—è—Ç–∫–æ–π –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏.")
		case nil:
			return precision
		}
	}
}

func promptEquation(r *bufio.Reader) (eq *equation) {
	fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: ")
	for i, e := range equations {
		fmt.Printf("%d) %s = 0\n", i+1, e.notation)
	}

	for {
		fmt.Print("> ")
		eq, err := readEquation(r)
		switch err {
		case ErrUnknown, ErrNotAnInt:
			fmt.Println("–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ë—ã—Ç—å –º–æ–∂–µ—Ç, —ç—Ç–æ –±—ã–ª–æ –Ω–µ —á–∏—Å–ª–æ. –ë—ã—Ç—å –º–æ–∂–µ—Ç, –∫–∞–∫–æ–π-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª. –ò—Ç–æ–≥ –æ–¥–∏–Ω - –ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.")
		case ErrNotInList:
			fmt.Println("–¢–∞–∫–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		case nil:
			return eq
		}
	}
}

func promptInterval(r *bufio.Reader, app *app) (a, b float64) {
	var err error

	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Ä–Ω—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
	for {
		fmt.Print("> ")
		a, b, err = readInterval(r, app)
		switch err {
		case ErrUnknown: fmt.Println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrExpectedTwoNumbers: fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrANotANumber: fmt.Println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrBNotANumber: fmt.Println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrBadInterval: fmt.Println("–ù—É –≤—ã —á–µ–≥–æ. –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ –ª–µ–≤–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		case ErrIntervalIsPoint: fmt.Println("–í–∞—à –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π. –ò–Ω–∞—á–µ —ç—Ç–æ –≤—Å–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ")
		case ErrNoConvergence: fmt.Println("–ù–∞ –¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –ª–∏–±–æ —Å–æ–≤—Å–µ–º –Ω–µ—Ç—É –∫–æ—Ä–Ω–µ–π, –ª–∏–±–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ. –°–æ–≤–µ—Ç—É—é –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª—É—á—à–µ.")
		case nil: return a, b
		}
	}
}

func promptSecantStartXs(r *bufio.Reader, app *app) (x0, x1 float64) {
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è - x0 –∏ x1 –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Ä–Ω—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
	for {
		fmt.Print("> ")
		x0, x1, err := readSecantStartXs(r, app)
		switch err {
		case ErrUnknown: fmt.Println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrExpectedTwoNumbers: fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrX0NotANumber: fmt.Println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ x0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		case ErrX0NotInInterval: fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ x0 –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")
		case ErrX1NotANumber:fmt.Println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ x1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrX1NotInInterval: fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ x1 –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")
		case ErrTwoNumbersAreOne: fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ x0 –∏ x1 –æ—Ç—Å—Ç–æ—è—â–∏—è –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ–µ, —á–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.")
		case nil: return x0, x1
		}
	}
}

func promptIterationStartX(r *bufio.Reader, app *app) (x0 float64) {
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è - x0 –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Ä–Ω—è:")
	for {
		fmt.Print("> ")
		x0, err :=  readIterationStartX(r, app)
		switch err {
		case ErrUnknown: fmt.Println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrNotANumber: fmt.Println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ x0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		case ErrNotInInterval: fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ x0 –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")
		case nil: return x0
		}
	}
}